generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  firstName String
  lastName  String
  email     String     @unique
  password  String
  isAdmin   Boolean    @default(false)
  bio       String? // For user profile
  avatar    String? // For user profile
  posts     Post[]     @relation("UserPosts")
  bookmarks Bookmark[] @relation("UserBookmarks")
  media     Media[]    @relation("UserMedia")
  payments  Payment[]  @relation("UserToPayment") // Opposite for Payment.user
  chatLogs  ChatLog[]  @relation("UserToChatLog") // Opposite for ChatLog.user
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Post {
  id         String     @id @default(uuid())
  title      String
  slug       String     @unique
  content    String
  excerpt    String?
  coverImage String?
  published  Boolean    @default(false)
  isFeatured Boolean    @default(false)
  views      Int?       @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  authorId   String
  categoryId String?
  author     User       @relation("UserPosts", fields: [authorId], references: [id])
  category   Category?  @relation("PostToCategory", fields: [categoryId], references: [id], onDelete: SetNull)
  tags       Tag[]      @relation("PostToTag")
  comments   Comment[]
  likes      Like[]
  bookmarks  Bookmark[] @relation("PostBookmarks")
  media      Media[]    @relation("PostMedia")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  posts       Post[]   @relation("PostToCategory")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  posts     Post[]   @relation("PostToTag")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String @id @default(uuid())
  content String
  postId  String
  post    Post   @relation(fields: [postId], references: [id])
}

model Like {
  id     String @id @default(uuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id])
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  user      User     @relation("UserBookmarks", fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation("PostBookmarks", fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
}

model Media {
  id        String   @id @default(uuid())
  url       String
  type      String
  name      String
  size      Int
  width     Int?
  height    Int?
  userId    String
  postId    String?
  user      User     @relation("UserMedia", fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation("PostMedia", fields: [postId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  price       Float    @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plan {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  price       Float     @default(0.0)
  features    String[]  @default([])
  payments    Payment[] @relation("PlanToPayment") // Opposite for Payment.plan
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Payment {
  id            String   @id @default(uuid())
  userId        String
  planId        String
  amount        Float
  status        String   @default("pending") // e.g., pending, success, failed
  transactionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation("UserToPayment", fields: [userId], references: [id])
  plan          Plan     @relation("PlanToPayment", fields: [planId], references: [id])
}

model ChatLog {
  id        String   @id @default(uuid())
  userId    String
  message   String
  response  String?
  createdAt DateTime @default(now())
  user      User     @relation("UserToChatLog", fields: [userId], references: [id])
}