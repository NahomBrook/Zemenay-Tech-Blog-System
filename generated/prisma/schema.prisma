// This is your Prisma schema file for NeonDB
// Learn more about NeonDB: https://neon.tech/

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String?
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  posts     Post[]
  bookmarks Bookmark[]
  media     Media[]
}

model Post {
  id          String     @id @default(uuid())
  title       String
  slug        String     @unique
  content     String     @db.Text
  excerpt     String?
  coverImage  String?
  published   Boolean    @default(false)
  publishedAt DateTime?
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  tags        Tag[]      @relation("PostToTag")
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  String?
  bookmarks   Bookmark[]
  media       Media[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([slug])
  @@index([published])
  @@index([authorId])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  posts     Post[]   @relation("PostToTag")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Media {
  id        String   @id @default(uuid())
  url       String
  type      String // 'IMAGE' | 'VIDEO' | 'DOCUMENT'
  name      String
  size      Int // in bytes
  width     Int? // for images/videos
  height    Int? // for images/videos
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}
